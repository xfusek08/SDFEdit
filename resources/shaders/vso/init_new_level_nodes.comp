#version 460 core

#line 3

// BRANCHING_FACTOR macro could defined from the outside
#ifndef BRANCHING_FACTOR
    // tile size for branching factor: n = 4
    #define BRANCHING_FACTOR   4  // n <- keep this powers of two
#endif

#define SUBDIVIDE_THIS_BIT 0x80000000
#define HAS_BRICK_BIT      0x40000000
#define NODE_FLAGS_MASK    0xC0000000
#define CHILD_POINTER_MASK 0x3FFFFFFF

// shader settings
layout(local_size_x = BRANCHING_FACTOR, local_size_y = BRANCHING_FACTOR, local_size_z = BRANCHING_FACTOR) in;

// node pool
layout(std430, binding = 1) buffer NodePool     { uint nodes[]; };
layout(std430, binding = 2) buffer NodeDataPool { uint nodeData[]; };
layout(std430, binding = 3) buffer VertexBuffer { vec4 nodeVertices[]; };

uniform uint levelBeginIndex;
uniform uint initRootTile;
uniform vec4 correctionVector;

void main() {
    
    // Common preparation for whole workgroup
    // --------------------------------------
    
    // get current node: each node is precessed by one workgroup with thread for each child
    uint parentIndex = gl_WorkGroupID.x + levelBeginIndex;
    uint node;
    vec4 parentPos;
    
    // All branching is common for all threads in the group
    if (initRootTile == 1) {
        node      = 0;
        parentPos = vec4(0, 0, 0, correctionVector.w);
    } else {
        node      = nodes[parentIndex];
        parentPos = nodeVertices[parentIndex];
        
        // if current node is node divided then this while workgroup ends
        if ((node & SUBDIVIDE_THIS_BIT) == 0) {
            return;
        }
    }
    
    // thread specific data processing: init each children in child tile
    // ------------------------------------------------------------------
    
    // each thread gets its own child
    uint workgroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
    uint childIndex = ((node & CHILD_POINTER_MASK) * workgroupSize) + gl_LocalInvocationIndex;
    
    // zero the child
    nodes[childIndex] = 0;
    nodeData[childIndex] = 0;
    
    // integer operations to utilize integer division using bit shifts (all dividers are powers of 2)
    ivec3 branchCoefficients  = ivec3(gl_LocalInvocationID) - (BRANCHING_FACTOR / 2);

    // fp calculation
    float fullStep    = 1.0 / float(BRANCHING_FACTOR); // hopefully the only FP division and possibly optimize into multiplication by 0.5, 0.25 etc.
    float halfStep    = fullStep * 0.5;
    vec3  shiftVector = fullStep * vec3(branchCoefficients) + halfStep;

    // compute final position by scaling and translating it by parent position
    nodeVertices[childIndex] = vec4(parentPos.w * shiftVector + parentPos.xyz, parentPos.w * fullStep);
    // nodeVertices[childIndex] = vec4(shiftVector, childSideLength);
}
