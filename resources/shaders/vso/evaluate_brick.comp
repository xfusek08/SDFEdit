#version 460 core

#line 3


// Static settings
// ---------------

// BRANCHING_FACTOR macro could defined from the outside
#ifndef BRANCHING_FACTOR
    // tile size for branching factor: n = 4
    #define BRANCHING_FACTOR  4  // n <- keep this powers of two
#endif

#ifndef BRICK_SIDE_LENGTH
    #define BRICK_SIDE_LENGTH 8  // lets have NxNxN bricks
#endif

#if BRANCHING_FACTOR == 2
    #define NODES_PER_TILE 8
    #define NODE_TO_TILE(nodeIndex) (nodeIndex >> 3)
#elif BRANCHING_FACTOR == 4
    #define NODES_PER_TILE 64
    #define NODE_TO_TILE(nodeIndex) (nodeIndex >> 6)
#else
    #error BRANCHING_FACTOR macro mus wave value 2 or 4
#endif

#define SUBDIVIDE_THIS_BIT 0x80000000
#define HAS_BRICK_BIT      0x40000000
#define NODE_FLAGS_MASK    0xC0000000
#define CHILD_POINTER_MASK 0x3FFFFFFF

#define SOLID_NODE 1
#define EMPTY_NODE 0

// SDF settings
#define MAX_DISTANCE     1000000.0

#define PRIMITIVE_SPHERE    0
#define PRIMITIVE_CAPSULE   1
#define PRIMITIVE_TORUS     2
#define PRIMITIVE_BOX       3
#define PRIMITIVE_CYLINDER  4
#define PRIMITIVE_CONE      5
#define PRIMITIVE_ROUNDCONE 6

#define OPERATION_ADD       0
#define OPERATION_SUBTRACT  1
#define OPERATION_INTERSECT 2
#define OPERATION_PAINT     3

#define SQRT_3 1.73205080757


// Shader data
// ------------

layout(local_size_x = BRICK_SIDE_LENGTH, local_size_y = BRICK_SIDE_LENGTH, local_size_z = BRICK_SIDE_LENGTH) in;

// node pool
layout(binding = 0, offset = 0) uniform atomic_uint nodeCount;
layout(std430, binding = 1) buffer NodePool { uint nodes[]; };
layout(std430, binding = 2) buffer NodeDataPool { uint nodeData[]; };
layout(std430, binding = 3) buffer VertexBuffer { vec4 nodeVertices[]; };

uniform uint levelBeginIndex;
uniform uint allowSubdivision;

// brick pool
layout(binding = 0, offset = 4) uniform atomic_uint brickCount;
layout(r32f, binding = 1) writeonly restrict uniform image3D brickPoolTexture;
uniform uint bricksInOneDimension;

// Primitive Cloud
struct Edit {
    uint  type;
    uint  op;
    float blending;
    uint  padding1;
    mat4  transform;
    vec4  data;
};

layout(std430, binding = 4) buffer Input { Edit edits[]; };
uniform uint editCount;
uniform vec4 correctionVector;

shared uint divide; // place in group-shared memory into which voting whenever node will be subdivided will take place.
shared uint brickIndex;

// SD Function of point to edit
#define TRANSFORM_POS(edit, pos) (inverse(edit.transform) * vec4(pos + correctionVector.xyz, 1)).xyz;
// TODO: precompute inverse

float sdSphere(Edit edit, vec3 position) {
    vec3 p = TRANSFORM_POS(edit, position);
    return length(p) - edit.data.x;
}

float sdCapsule(Edit edit, vec3 position) {
    vec3  p = TRANSFORM_POS(edit, position);
    float r = edit.data.x;
    float h = max(0, edit.data.y - 2 * r);
    
    vec3 a = vec3(0,  0.5, 0) * h;
    vec3 b = vec3(0, -0.5, 0) * h;
    
    vec3 ab = b - a;
    vec3 ap = p - a;
    float t = clamp(dot(ab, ap) / dot(ab, ab), 0, 1);
    return length(ap - ab * t) - r;
}

float sdTorus(Edit edit, vec3 position) {
    vec3  p = TRANSFORM_POS(edit, position);
    float x = length(p.xz) - edit.data.x;
    return length(vec2(x, p.y)) - edit.data.y;
}

float sdBox(Edit edit, vec3 position) {
    vec3  p = TRANSFORM_POS(edit, position);
    vec3  d = abs(p) - edit.data.xyz + edit.data.www;
    float e = length(max(d, 0.0));
    float i = min(max(d.x, max(d.y, d.z)), 0.0);
    return e + i - edit.data.w;
}

float sdCylinder(Edit edit, vec3 position) {
    vec3  p = TRANSFORM_POS(edit, position);
    float w = edit.data.x - edit.data.z;
    float h = edit.data.y - edit.data.z;
    vec2  d = abs(vec2(length(p.xz), p.y)) - vec2(w, h);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - edit.data.z;
}

float sdCone(Edit edit, vec3 position) {
    float r1 = edit.data.x - edit.data.w;
    float r2 = edit.data.y - edit.data.w;
    float h  = edit.data.z * 0.5 - edit.data.w;
    vec3  p  = TRANSFORM_POS(edit, position);

    vec2  q  = vec2(length(p.xz), p.y);
    vec2  k1 = vec2(r2, h);
    vec2  k2 = vec2(r2 - r1, 2.0 * h);
    vec2  ca = vec2(q.x - min(q.x, (q.y < 0.0) ? r1 : r2), abs(q.y) - h);
    vec2  cb = q - k1 + k2 * clamp(dot(k1 - q, k2) / dot(k2.xy, k2.xy), 0.0, 1.0);
    float s  = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;
    return s * sqrt(min(dot(ca.xy, ca.xy), dot(cb.xy, cb.xy))) - edit.data.w;
}

float sdRoundcone(Edit edit, vec3 position) {
    float r1 = edit.data.x;
    float r2 = edit.data.y;
    float h  = edit.data.z - r1 - r2;
    vec3  p  = TRANSFORM_POS(edit, position);
    p.y += 0.5 * (h - (r1 - r2));
    
    float b = (r1 - r2) / h;
    vec2 q = vec2(length(p.xz), p.y);
    
    float a = sqrt(1.0 - b * b);
    float k = dot(q, vec2(-b, a));
    
    if (k < 0.0) return length(q) - r1;
    if (k > a * h) return length(q - vec2(0.0, h)) - r2;
            
    return dot(q, vec2(a, b)) - r1;
}

// sdf evaluation math function
// see https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float smoothMin(float dist1, float dist2, float koeficient) {
    float h = clamp(0.5 + 0.5 * (dist1 - dist2) / koeficient, 0.0, 1.0 );
    return mix(dist1, dist2, h) - koeficient * h * (1.0 - h);
}

float smoothMax(float dist1, float dist2, float koeficient) {
    float h = clamp(0.5 - 0.5 * (dist1 - dist2) / koeficient, 0.0, 1.0 );
    return mix(dist1, dist2, h) + koeficient * h * (1.0 - h);
}

float distanceToEdit(Edit edit, vec3 position) {
    switch (edit.type) {
        case PRIMITIVE_SPHERE:    return sdSphere(edit, position);
        case PRIMITIVE_CAPSULE:   return sdCapsule(edit, position);
        case PRIMITIVE_TORUS:     return sdTorus(edit, position);
        case PRIMITIVE_BOX:       return sdBox(edit, position);
        case PRIMITIVE_CYLINDER:  return sdCylinder(edit, position);
        case PRIMITIVE_CONE:      return sdCone(edit, position);
        case PRIMITIVE_ROUNDCONE: return sdRoundcone(edit, position);
    }
    return MAX_DISTANCE;
}

float getSDFValue(vec3 pos) {
    // compute distance to the voxel center -> sdfValue
    float sdfValue = MAX_DISTANCE;
    for (int i = 0; i < editCount; ++i) {
        Edit edit = edits[i];
        float distanceToPrimitive = distanceToEdit(edit, pos);
        
        switch (edit.op) {
            case OPERATION_ADD:       sdfValue = smoothMin( distanceToPrimitive, sdfValue, max(0.001, edit.blending)); break;
            case OPERATION_SUBTRACT:  sdfValue = smoothMax(-distanceToPrimitive, sdfValue, max(0.001, edit.blending)); break;
            case OPERATION_INTERSECT: sdfValue = smoothMax( distanceToPrimitive, sdfValue, max(0.001, edit.blending)); break;
            case OPERATION_PAINT:     sdfValue = sdfValue; break; // TODO: pointing using primitive is not implemented
        }
    }
    return sdfValue;
}

// volume manipulation

uint newNode(uint tileIndex, uint flags) {
    return (tileIndex & CHILD_POINTER_MASK) | (flags & NODE_FLAGS_MASK);
}

void writeToVolumeTexture(ivec3 brickVoxelCoord, float sdfValue, vec3 voxelCenter, float fullStep, float scale) {
    // each voxel writes its own value
    imageStore(brickPoolTexture, brickVoxelCoord, vec4(scale * sdfValue, 0, 0, 0));
    
    // handle the border region
    ivec3 cornerShift   = ivec3(0, 0, 0);
    uint  corderCounter = 0;
    
    #define STORE_VALUE_WITH_SIFT(shift) imageStore(brickPoolTexture, brickVoxelCoord + shift, vec4(scale * getSDFValue(fullStep * (1.0 / scale) * vec3(shift) + voxelCenter), 0, 0, 0))
    #define PROCESS_EDGE(sx, sy, sz) \
        STORE_VALUE_WITH_SIFT(ivec3(sx, sy, sz)); \
        cornerShift += ivec3(sx, sy, sz); \
        corderCounter++
    
    // this branching probably can be speeded up by some clever register array and one or two branches
    
    if (gl_LocalInvocationID.x == 0) {
        PROCESS_EDGE(-1, 0, 0);
    } else if (gl_LocalInvocationID.x == 7) {
        PROCESS_EDGE(1, 0, 0);
    }
    
    if (gl_LocalInvocationID.y == 0) {
        PROCESS_EDGE(0, -1, 0);
    } else if (gl_LocalInvocationID.y == 7) {
        PROCESS_EDGE(0, 1, 0);
    }
    
    if (gl_LocalInvocationID.z == 0) {
        PROCESS_EDGE(0, 0, -1);
    } else if (gl_LocalInvocationID.z == 7) {
        PROCESS_EDGE(0, 0, 1);
    }
    
    if (corderCounter >= 2) {
        STORE_VALUE_WITH_SIFT(cornerShift);
    }
    
    if (corderCounter == 3) {
        STORE_VALUE_WITH_SIFT(ivec3(0, cornerShift.y, cornerShift.z));
        STORE_VALUE_WITH_SIFT(ivec3(cornerShift.x, 0, cornerShift.z));
        STORE_VALUE_WITH_SIFT(ivec3(cornerShift.x, cornerShift.y, 0));
    }
}

uint encodeBrickCoords(uvec3 coords) {
    return ((coords.x & 0x3FF) << 20) | ((coords.y & 0x3FF) << 10) | (coords.z & 0x3FF);
}

void main() {
    if (gl_LocalInvocationIndex == 0) {
        divide = 0; // prepare local memory
    }
    barrier();
    
    uint nodeIndex = levelBeginIndex + gl_WorkGroupID.x;
    vec4 nodeVertex  = nodeVertices[nodeIndex];
   
    ivec3 branchCoefficients = ivec3(gl_LocalInvocationID) - (BRICK_SIDE_LENGTH / 2);
    float fullStep           = 1.0 / (float(BRICK_SIDE_LENGTH)); // hopefully the only FP division and possibly optimize into multiplication by 0.5, 0.25 etc.
    float halfStep           = fullStep * 0.5;
    vec3  shiftVector        = fullStep * vec3(branchCoefficients) + halfStep;
    vec3  voxelCenter        = nodeVertex.w * shiftVector + nodeVertex.xyz;
    float sdfValue           = getSDFValue(voxelCenter);
    
    // vote if voxel intersects sdf surface
    float voxelSize = SQRT_3 * (fullStep * nodeVertex.w) * 0.4;
    if (abs(sdfValue) < voxelSize) {
        atomicAdd(divide, 1);
    }
    barrier();
    
    // If division was voted all threads will enter this branch
    //   - In this branch will be saved evaluated volume as new brick
    if (divide != 0) {
        
        // first thread will reserve new brick
        if (gl_LocalInvocationIndex == 0) {
            brickIndex = atomicCounterIncrement(brickCount);
        }
        barrier();
        
        // all threads will find voxel coordinate in brick pool based on the brick index
        uvec3 brickCoords = uvec3(
            brickIndex % bricksInOneDimension,
            (brickIndex / bricksInOneDimension) % bricksInOneDimension,
            brickIndex / (bricksInOneDimension * bricksInOneDimension)
        );
        uvec3 voxelCoord = 10 * brickCoords + gl_LocalInvocationID + uvec3(1, 1, 1);
        
        writeToVolumeTexture(ivec3(voxelCoord), sdfValue, voxelCenter, fullStep, 1.0 / nodeVertex.w);
        
        // I am fist thread in the group and will divide this node
        if (gl_LocalInvocationIndex == 0 ) {
            uint flags = HAS_BRICK_BIT;
            uint newTileFirstNodeIndex = 0;
            nodeData[nodeIndex] = encodeBrickCoords(brickCoords);
            
            if (allowSubdivision != 0) {
                flags |= SUBDIVIDE_THIS_BIT;
                newTileFirstNodeIndex = atomicCounterAdd(nodeCount, NODES_PER_TILE);
            }
            
            nodes[nodeIndex] = newNode(NODE_TO_TILE(newTileFirstNodeIndex), flags); // link this node to its newly created child and keep its flags
        }
    } else {
        if (gl_LocalInvocationIndex == 0 ) {
            nodes[nodeIndex] = newNode(0, 0); // make sure that brick and subdivide bits are zero
            nodeData[nodeIndex] = (sdfValue < 0) ? SOLID_NODE : EMPTY_NODE;
        }
    }
}
