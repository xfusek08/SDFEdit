#version 460 core

#line 3

// Static settings

// BRANCHING_FACTOR macro could defined from the outside
#ifndef BRANCHING_FACTOR
    // tile size for branching factor: n = 4
    #define BRANCHING_FACTOR  4  // n <- keep this powers of two
#endif

#ifndef BRICK_SIDE_LENGTH
    #define BRICK_SIDE_LENGTH 8  // lets have NxNxN bricks
#endif

#if BRANCHING_FACTOR == 2
    #define NODES_PER_TILE 8
    #define NODE_TO_TILE(nodeIndex) (nodeIndex >> 3)
#elif BRANCHING_FACTOR == 4
    #define NODES_PER_TILE 64
    #define NODE_TO_TILE(nodeIndex) (nodeIndex >> 6)
#else
    #error BRANCHING_FACTOR macro mus wave value 2 or 4
#endif

#define SUBDIVIDE_THIS_BIT 0x80000000
#define HAS_BRICK_BIT      0x40000000
#define NODE_FLAGS_MASK    0xC0000000
#define CHILD_POINTER_MASK 0x3FFFFFFF

// shader implementation settings

layout(local_size_x = BRICK_SIDE_LENGTH, local_size_y = BRICK_SIDE_LENGTH, local_size_z = BRICK_SIDE_LENGTH) in;

// node pool
layout(binding = 0, offset = 0) uniform atomic_uint nodeCount;
layout(std430, binding = 1) buffer NodePool { uint nodes[]; };
layout(std430, binding = 2) buffer Position { vec4 nodeVertices[]; };
layout(std430, binding = 4) buffer brickHelperBuffer { vec4 brick[]; };

// edit list
struct Edit {
    uint type;
    uint op;
    uint blending;
    uint padding1;
    vec3 position;
    float padding2;
    vec4 data;
};

layout(std430, binding = 3) buffer Input { Edit edits[]; };

// uniforms
uniform uint levelBeginIndex;
uniform uint currentLevel;
uniform uint maxSubdivisions;

// uniform vec3  centerCorrection;
// uniform float voxelSize;
// uniform uint  voxelCount;
// uniform uint  editCount;

shared uint divide; // place in group-shared memory into which voting whenever node will be subdivided will take place.

// functions
uint newNode(uint tileIndex, uint flags) {
    return (tileIndex & CHILD_POINTER_MASK) | (flags & NODE_FLAGS_MASK);
}

void main() {
    if (gl_LocalInvocationIndex == 0) {
        divide = 0; // prepare local memory
    }
    memoryBarrierShared();
    
    uint nodeIndex = levelBeginIndex + gl_WorkGroupID.x;
    vec4 brickPos  = nodeVertices[nodeIndex];
    
    // compute center of voxel from center of brick and
    ivec3 branchCoefficients  = ivec3(gl_LocalInvocationID) - (BRICK_SIDE_LENGTH / 2);
    float fullStep            = 1.0 / float(BRICK_SIDE_LENGTH); // hopefully the only FP division and possibly optimize into multiplication by 0.5, 0.25 etc.
    float halfStep            = fullStep * 0.5;
    vec3  shiftVector         = fullStep * vec3(branchCoefficients) + halfStep;
    vec3  voxelCenter         = brickPos.w * shiftVector + brickPos.xyz;
    
    // if (gl_WorkGroupID.x == 6) {
    //     brick[gl_LocalInvocationIndex] = vec4(voxelCenter, brickPos.w * fullStep);
    //     // brick[gl_LocalInvocationIndex] = brickPos;
    //     if (gl_LocalInvocationIndex == 0) {
    //         // brick[509] = vec4(nodeVertices[0].xyz, nodeIndex);
    //         // brick[510] = vec4(nodeVertices[nodeIndex-1].xyz, nodeIndex - 1);
    //         // brick[511] = vec4(nodeVertices[nodeIndex].xyz, nodeIndex);
    //         if (currentLevel < maxSubdivisions) {
    //             uint newTileFirstNodeIndex = atomicCounterAdd(nodeCount, NODES_PER_TILE); // spawn tile
    //             nodes[nodeIndex] = newNode(NODE_TO_TILE(newTileFirstNodeIndex), SUBDIVIDE_THIS_BIT); // link this node to its newly created child and keep its flags
    //         }
    //     }
    // }
    
    // compute distance to voxel center
    // vote if voxel intersects sdf surface
    // wait till all threads in group finish voting
    // if I am first thread and vote was successful, create new node
    
    // tmp divide only one tile in whole tree
    
    if (abs(distance(voxelCenter, vec3(0, 0, 0)) - 0.3) < brickPos.w) {
        atomicOr(divide, 1);
    }
    memoryBarrierShared(); // wait till voting in the group ends
    
    // I am fist thread in the group and will divide this node if divide vote ended positive
    if (gl_LocalInvocationIndex == 0) {
        if (currentLevel < maxSubdivisions && divide > 0) {
            uint newTileFirstNodeIndex = atomicCounterAdd(nodeCount, NODES_PER_TILE); // spawn tile
            nodes[nodeIndex] = newNode(NODE_TO_TILE(newTileFirstNodeIndex), SUBDIVIDE_THIS_BIT); // link this node to its newly created child and keep its flags
        }
    }
}
