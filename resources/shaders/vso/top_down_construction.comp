#version 460 core

#line 3
// tile size
#define NODES_PER_TILE     8 // branching factor = 2 --> 2^3 = 8 nodes per tile
#define NODE_TO_TILE_SHIFT 3 // when computing tile from first node: (node / 8) == (node >> 3)

#define SUBDIVIDE_THIS_BIT 0x80000000
#define HAS_BRICK_BIT      0x40000000
#define NODE_FLAGS_MASK    0xC0000000
#define CHILD_POINTER_MASK 0x3FFFFFFF

#define STAGE_FLAG_NODES      0
#define STAGE_SUBDIVIDE_LEVEL 1
#define STAGE_INIT_LEVEL      2

// shader settings
layout(local_size_x = NODES_PER_TILE) in;

// node pool
layout(binding = 0, offset = 0) uniform atomic_uint nodeCount;
layout(std430, binding = 1) buffer NodePool { uint nodes[]; };

// if defined then subdivision step will for each created node generate its vertex in sapce
#ifdef GENERATE_POINT_VERTICIES
    layout(std430, binding = 2) buffer Position { vec4 nodeVerticies[]; };
    
    // offset directions for top level (first node tile) from center to child center
    #define FTL(D) vec3(-D,  D,  D) // front face
    #define FTR(D) vec3( D,  D,  D)
    #define FDL(D) vec3(-D, -D,  D)
    #define FDR(D) vec3( D, -D,  D)
    #define BTL(D) vec3(-D,  D, -D) // back face
    #define BTR(D) vec3( D,  D, -D)
    #define BDL(D) vec3(-D, -D, -D)
    #define BDR(D) vec3( D, -D, -D)
    // direction map
    vec3 offsetDirections[8] = vec3[8](
        FTL(1),
        FTR(1),
        FDL(1),
        FDR(1),
        BTL(1),
        BTR(1),
        BDL(1),
        BDR(1)
    );
#endif

uniform uint levelBeginIndex;

uniform uint maxSubdivisionLevel;

uniform uint stage;

uint currentLevelNodeIndex() {
    return levelBeginIndex + gl_GlobalInvocationID.x;
}

uint newNode(uint tileIndex, uint flags) {
    return (tileIndex & CHILD_POINTER_MASK) | (flags & NODE_FLAGS_MASK);
}

// The (1) FIRST step in SVO TOP-DOWN construction pipeline
//
// Node Flagging
// -------------------------------------
//
// This shader is suppose to be run for each voxel on most refined level
//
void flagNodes() {
    // tmp debugging
    
    // allways divide only first child
    if (gl_LocalInvocationID.x == 0 || gl_LocalInvocationID.x == 7) {
        uint currentNodeIndex   = currentLevelNodeIndex();
        uint node               = nodes[currentNodeIndex];
        nodes[currentNodeIndex] = node | SUBDIVIDE_THIS_BIT;
    }
}

// The (2) SECOND step in SVO TOP-DOWN construction pipeline
//
// Node Subdivision - new svo level creation
// -------------------------------------
//
// This shader is suppose to be run for one level of SVO defined by index of
// first node in the level ('levelBeginIndex')
//
// For each node which is flagged to be subdivided
//    -> allocate new node tile for its children
//
void subdivideLevel() {
    uint currentNodeIndex = currentLevelNodeIndex();
    uint node             = nodes[currentNodeIndex];
    
    // if marked as subdivided
    if ((node & SUBDIVIDE_THIS_BIT) != 0) {
        uint newTileFirstNodeIndex = atomicCounterAdd(nodeCount, NODES_PER_TILE); // spawn tile
        nodes[currentNodeIndex] = newNode(newTileFirstNodeIndex >> NODE_TO_TILE_SHIFT, node & NODE_FLAGS_MASK); // link this node to its newly created child and keep its flags
        
        // for each node in the new tile generate its vertex
        #ifdef GENERATE_POINT_VERTICIES
            vec4 currentVertex = nodeVerticies[currentNodeIndex];
            float offsetLength = currentVertex.w * 0.5;
            
            for (int i = 0; i < 8; ++i) {
                vec3 offset = offsetLength * offsetDirections[i];
                // nodeVerticies[newTileFirstNodeIndex + i] = currentVertex;
                vec4 newVertex = vec4(currentVertex.xyz + offset, offsetLength);
                nodes[newTileFirstNodeIndex + i] = newNode(newTileFirstNodeIndex + i, HAS_BRICK_BIT);
                nodeVerticies[newTileFirstNodeIndex + i] = newVertex;
            }
        #endif
    }
}

// The (3) THIRD step in SVO TOP-DOWN construction pipeline
//
// Node initiaton
// --------------
//
// Shader is suppose to be run for one level of SVO defined by index of
// first node in the level ('levelBeginIndex')
//
// Each thread sets its node in the level to zero. The node is supposed to be
// uninitialized (having undefined value).
//
void initLevel() {
    nodes[currentLevelNodeIndex()] = 0;
}

// main for selecting stader functionality
void main() {
    switch (stage) {
        case STAGE_FLAG_NODES:      flagNodes(); break;
        case STAGE_SUBDIVIDE_LEVEL: subdivideLevel(); break;
        case STAGE_INIT_LEVEL:      initLevel(); break;
    }
}
